(define ($scheme-name)
  "chez-scheme")
(define (binding-documentation p)
  ;; same as (inspect object), then hitting c
  (let ((s (((inspect/object p) 'code) 'source)))
    (if s
        (let ((form (s 'value)))
          (cond ((and (list? form)
                      (> (length form) 3)
                      (eq? (car form) 'lambda)
                      (string? (caddr form)))
                 (caddr form))
                ((and (list? form)
                      (> (length form) 2)
                      (eq? (car form) 'case-lambda))
                 '(case-lambda))
                (else
                 #f)))
        #f)))
(define (procedure-parameter-list p)
  ;; same as (inspect object), then hitting c
  (let ((s (((inspect/object p) 'code) 'source)))
    (if s
        (let ((form (s 'value)))
          (cond ((and (list? form)
                      (> (length form) 2)
                      (eq? (car form) 'lambda))
                 (cadr form))
                ((and (list? form)
                      (> (length form) 2)
                      (eq? (car form) 'case-lambda))
                 '(case-lambda))
                (else
                 #f)))
        #f)))
(define ($function-parameters-and-documentation name)
  (let* ((binding (call/cc (lambda (k) (with-exception-handler (lambda (c) (k #f)) (lambda () (eval (string->symbol name) (param:environment)))))))
         (param-list (if binding (procedure-parameter-list binding) #f))
         (signature (if param-list (cons (string->symbol name) param-list) #f))
         (doc (if binding (binding-documentation binding) #f)))
    (cons signature doc)))
(define (%write-to-string val)
  (let ((o (open-output-string)))
    (write val o)
    (get-output-string o)))
(define ($environment env-name)
  ;; don't support any changes
  (interaction-environment))
(define ($set-package env-name)
  ;; don't support any changes
  (list "(user)" "(user)"))
(define ($open-tcp-server/accept port-number handler)
     (with-tcp-server-socket
      port-number 1
      (lambda (socket)
        (let ((p (tcp-server-connection-accept socket)))
          (handler port-number p p)))))

(define $make-hash-table make-hash-table)

(define $hash-table/put! hashtable-set!)

(define $hash-table/get hashtable-ref)

;; (define (open-tcp-server-socket port)
;; ;;  (printf "open-tcp-server-socket ~a~%" port) (flush-output-port)
;;   (let ((socket (create-socket socket-domain/internet socket-type/stream socket-protocol/auto))
;;         (address (string->internet-address (format "0.0.0.0:~a" port))))
;; ;;    (printf "opening ~a\n" (format "0.0.0.0:~a" port)) (flush-output-port)
;;     (bind-socket socket address)
;;     socket))

;; (define (tcp-server-connection-accept socket block? peer-address)
;;   (set-socket-nonblocking! socket (not block?))
;; ;;  (printf "listening on port\n") (flush-output-port)
;;   (listen-socket socket 1)
;;   (let-values (((socket address) (accept-socket socket)))
;;     (let ((in (make-string 4096))
;;           (out (make-string 4096))
;;           (open? #t))
;;       (let ((p (make-input/output-port (lambda (cmd port . args)
;; ;;                                         (printf "cmd: ~a~%" cmd) (flush-output-port)
;;                                          (case cmd
;;                                            ((port-name)
;;                                             (format "socket"))
;;                                            ((flush-output-port)
;;                                             (send-to-socket socket (string->bytevector (substring out 0 (port-output-index port)) (native-transcoder)) address)
;;                                             (set-port-output-index! port 0))
;;                                            ((block-write)
;;                                             (flush-output-port port)
;;                                             (send-to-socket socket (string->bytevector (substring (car args) 0 (cadr args)) (native-transcoder)) address))
;;                                            ((block-read)
;;                                             (let ((out-wanted (cadr args))
;;                                                   (out-index 0)
;;                                                   (out (car args)))
;; ;;                                              (printf "block-read requested ~a bytes~%" out-wanted) (flush-output-port)
;;                                               (let* ((i (port-input-index port))
;;                                                      (s (port-input-size port))
;;                                                      (b (port-input-buffer port))
;;                                                      (available (- s i))
;;                                                      (count (min out-wanted available)))
;; ;;                                                (printf "  ~a bytes available, copying ~a~%" available count) (flush-output-port)
;;                                                 (string-copy! b i out 0 count)
;;                                                 (set! out-wanted (- out-wanted count))
;;                                                 (let ((out-index count))
;;                                                   (if (= s (+ i count))
;;                                                       (begin
;;                                                         (set-port-input-index! port 0)
;;                                                         (set-port-input-size! port 0))
;;                                                       (set-port-input-index! port (+ i count)))
;;                                                   (if (positive? out-wanted)
;;                                                       ;; need more
;;                                                       (let loop ((out-index out-index))
;;                                                         (let-values (((data address)
;;                                                                       (receive-from-socket socket out-wanted)))
;; ;;                                                          (printf "block-read: received ~s bytes from socket~%" (bytevector-length data)) (flush-output-port)
;;                                                           (let* ((str (bytevector->string data (native-transcoder)))
;;                                                                  (len (string-length str))
;;                                                                  ;(len (bytevector-length data))
;;                                                                  (count (min len out-wanted)))
;; ;;                                                            (printf "block-read: copying ~a to output~%" count)
;;                                                             (string-copy! str 0 out out-index count)
;;                                                             (set! out-wanted (- out-wanted count))
;;                                                             (if (zero? out-wanted)
;;                                                                 (begin
;; ;;                                                                  (printf "block-read: copying ~a to input buffer~%" (- len count))
;;                                                                   (string-copy! str count b 0 (- len count))
;;                                                                   (set-port-input-size! port (- len count))
;;                                                                   (set-port-input-index! port 0)
;; ;;                                                                  (printf "returning ~a~%" (+ out-index count))
;;                                                                   (+ out-index count))
;;                                                                 (loop (+ out-index count))))))
;;                                                       count)



;;                                                   ;; (if (= (port-input-index port) (port-input-size port))
;;                                                   ;;     (let-values (((data address)
;;                                                   ;;                   (receive-from-socket socket (cadr args))))
;;                                                   ;;       (printf "received ~s bytes: ~s~%" (bytevector-length data) data) (flush-output-port)
;;                                                   ;;       (let* ((str (bytevector->string data (native-transcoder)))
;;                                                   ;;              (len (min (string-length (car args)) (string-length str))))
;;                                                   ;;         (string-copy! str 0 (car args) 0 len)
;;                                                   ;;         len))
;;                                                   ;;     (let* ((input-len (- (port-input-size port) (port-input-index port)))
;;                                                   ;;            (buffer-len (cadr args))
;;                                                   ;;            (len (min input-len buffer-len)))
;;                                                   ;;       (printf "have cache ~s bytes, using ~s: ~s~%" input-len len (substring (port-input-buffer port) (port-input-index port) (port-input-size port))) (flush-output-port)
;;                                                   ;;       (string-copy! (port-input-buffer port) (port-input-index port) (car args) 0 len)
;;                                                   ;;       (if (= input-len buffer-len)
;;                                                   ;;           (begin
;;                                                   ;;             (set-port-input-size! port 0)
;;                                                   ;;             (set-port-input-index! port 0))
;;                                                   ;;           (set-port-input-index! port (+ (port-input-index port) buffer-len)))
;;                                                   ;;       (printf "returning ~a characters, ~s~%" len (string-length (car args)))
;;                                                   ;;       (printf "new port state ~a ~a: ~s~%" (port-input-index port) (port-input-size port) (substring (port-input-buffer port) (port-input-index port) (port-input-size port))) (flush-output-port)
;;                                                   ;;       len))
;;                                                   ))))
;;                                            ((close-port)
;;                                             (when open?
;;                                               (flush-output-port port)
;;                                               (close-socket socket)
;;                                               (set! open? #f)))
;;                                            ((read-char)
;;                                             (if (< (port-input-index port) (port-input-size port))
;;                                                 (let ((c (string-ref (port-input-buffer port) (port-input-index port))))
;;                                                   (set-port-input-index! port (+ (port-input-index port) 1))
;;                                                   c)
;;                                                 (let ((len (if (= (port-input-index port) (port-input-size port))
;;                                                                (string-length in)
;;                                                                (- (string-length in) (port-input-size port))))
;;                                                       (new-index (if (= (port-input-index port) (port-input-size port))
;;                                                                      0
;;                                                                      (port-input-index port))))
;;                                                   (let-values (((data address)
;;                                                                 (receive-from-socket socket len)))
;;                                                     (let ((len (bytevector-length data)))
;; ;;                                                      (printf "received ~s bytes: ~s~%" len data)
;;                                                       (let ((str (bytevector->string data (native-transcoder))))
;;                                                         (string-copy! str 0 (port-input-buffer port) new-index (string-length str))
;;                                                         (set-port-input-size! port (+ new-index (string-length str)))
;;                                                         (set-port-input-index! port (+ new-index 1))
;;                                                         (string-ref in new-index)))))))
;;                                            ((peek-char)
;;                                             (if (< (port-input-index port) (port-input-size port))
;;                                                 (string-ref port (port-input-index port))
;;                                                 (eof-object)))
;;                                            (else
;;                                             (printf "unknown command ~s: ~s~%" cmd args) (flush-output-port))))
;;                                        in
;;                                        out)))
;;         (set-port-input-size! p 0)
;;         p))))

(define (read-bytevector size port)
  (get-bytevector-n port size)
  ;; (let* ((str (make-string size))
  ;;       (n (block-read port str size)))
  ;;   (if (= n size)
  ;;       (string->bytevector str (native-transcoder))
  ;;       (error 'read-bytevector "read less than wanted" size port n)))
  )

(define (write-string str port)
  (put-bytevector port (string->utf8 str))
  ;;  (block-write port str (string-length str))
  )

(define ($error-description error)
  (let ((o (open-output-string)))
    (display-condition error o)
    (get-output-string o)))

(define ($all-package-names)
  (map (lambda (package) (%write-to-string package))
       (cons '(user) (library-list))))

(define (bytevector-copy! to to-index from)
  (%bytevector-copy! from 0 to to-index (bytevector-length from)))

(define ($output-to-repl thunk)
  ;; basic implementation, print all output at the end, this should
  ;; be replaced with a custom output port
  (let ((o (open-output-string)))
    (parameterize ((current-output-port o)
                   (trace-output-port o)
                   (current-error-port o))
      (let-values ((x (thunk)))
        (swank/write-string (get-output-string o) #f)
        (apply values x)))))

(define (pstring->environment pstring)
  (if (or (eq? 'nil pstring)
          (string=? "(user)" pstring)
          (string=? "COMMON-LISP-USER" pstring))
      (interaction-environment)
      (environment (read-from-string pstring))))
(define (read-from-string string)
  (read (open-input-string string)))
(define (string-prefix? x y)
  (let ([n (string-length x)])
    (and (fx<= n (string-length y))
         (let prefix? ([i 0])
           (or (fx= i n)
               (and (char=? (string-ref x i) (string-ref y i))
                    (prefix? (fx+ i 1))))))))
(define (string-match-forward a b)
  (let* ((a-len (string-length a))
         (b-len (string-length b))
         (min-len (min a-len b-len)))
    (let loop ((i 0))
      (if (> i min-len)
          (- i 1)
          (if (string=? (substring a 0 i) (substring b 0 i))
              (loop (+ i 1))
              (- i 1))))))
(define (longest-common-prefix strings)
  (if (null? strings)
      '()
      (fold-left (lambda (s1 s2) (substring s2 0 (string-match-forward s1 s2))) (car strings) (cdr strings))))

(define ($completions prefix env-name)
  (let ((matches (sort string-ci<?
                       (filter (lambda (el)
                                 (string-prefix? prefix el))
                               (map %write-to-string (environment-symbols (pstring->environment env-name))))))) ;;  (interaction-environment)
    (cons matches
          (longest-common-prefix matches))))

(define (list-index predicate list)
  (let loop ((i 0)
             (l list))
    (if (null? l)
        #f
        (if (predicate (car l))
            i
            (loop (+ i 1) (cdr l))))))
